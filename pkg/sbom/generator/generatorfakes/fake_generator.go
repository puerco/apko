// Code generated by counterfeiter. DO NOT EDIT.
package generatorfakes

import (
	"sync"

	"chainguard.dev/apko/pkg/build/types"
	"chainguard.dev/apko/pkg/sbom/generator"
	"chainguard.dev/apko/pkg/sbom/options"
	"github.com/sigstore/cosign/pkg/oci"
)

type FakeGenerator struct {
	ExtStub        func() string
	extMutex       sync.RWMutex
	extArgsForCall []struct {
	}
	extReturns struct {
		result1 string
	}
	extReturnsOnCall map[int]struct {
		result1 string
	}
	GenerateStub        func(*options.Options, string) error
	generateMutex       sync.RWMutex
	generateArgsForCall []struct {
		arg1 *options.Options
		arg2 string
	}
	generateReturns struct {
		result1 error
	}
	generateReturnsOnCall map[int]struct {
		result1 error
	}
	GenerateIndexStub        func(*options.Options, string, map[types.Architecture]oci.SignedImage) (string, error)
	generateIndexMutex       sync.RWMutex
	generateIndexArgsForCall []struct {
		arg1 *options.Options
		arg2 string
		arg3 map[types.Architecture]oci.SignedImage
	}
	generateIndexReturns struct {
		result1 string
		result2 error
	}
	generateIndexReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	KeyStub        func() string
	keyMutex       sync.RWMutex
	keyArgsForCall []struct {
	}
	keyReturns struct {
		result1 string
	}
	keyReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGenerator) Ext() string {
	fake.extMutex.Lock()
	ret, specificReturn := fake.extReturnsOnCall[len(fake.extArgsForCall)]
	fake.extArgsForCall = append(fake.extArgsForCall, struct {
	}{})
	stub := fake.ExtStub
	fakeReturns := fake.extReturns
	fake.recordInvocation("Ext", []interface{}{})
	fake.extMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGenerator) ExtCallCount() int {
	fake.extMutex.RLock()
	defer fake.extMutex.RUnlock()
	return len(fake.extArgsForCall)
}

func (fake *FakeGenerator) ExtCalls(stub func() string) {
	fake.extMutex.Lock()
	defer fake.extMutex.Unlock()
	fake.ExtStub = stub
}

func (fake *FakeGenerator) ExtReturns(result1 string) {
	fake.extMutex.Lock()
	defer fake.extMutex.Unlock()
	fake.ExtStub = nil
	fake.extReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeGenerator) ExtReturnsOnCall(i int, result1 string) {
	fake.extMutex.Lock()
	defer fake.extMutex.Unlock()
	fake.ExtStub = nil
	if fake.extReturnsOnCall == nil {
		fake.extReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.extReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeGenerator) Generate(arg1 *options.Options, arg2 string) error {
	fake.generateMutex.Lock()
	ret, specificReturn := fake.generateReturnsOnCall[len(fake.generateArgsForCall)]
	fake.generateArgsForCall = append(fake.generateArgsForCall, struct {
		arg1 *options.Options
		arg2 string
	}{arg1, arg2})
	stub := fake.GenerateStub
	fakeReturns := fake.generateReturns
	fake.recordInvocation("Generate", []interface{}{arg1, arg2})
	fake.generateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGenerator) GenerateCallCount() int {
	fake.generateMutex.RLock()
	defer fake.generateMutex.RUnlock()
	return len(fake.generateArgsForCall)
}

func (fake *FakeGenerator) GenerateCalls(stub func(*options.Options, string) error) {
	fake.generateMutex.Lock()
	defer fake.generateMutex.Unlock()
	fake.GenerateStub = stub
}

func (fake *FakeGenerator) GenerateArgsForCall(i int) (*options.Options, string) {
	fake.generateMutex.RLock()
	defer fake.generateMutex.RUnlock()
	argsForCall := fake.generateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeGenerator) GenerateReturns(result1 error) {
	fake.generateMutex.Lock()
	defer fake.generateMutex.Unlock()
	fake.GenerateStub = nil
	fake.generateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGenerator) GenerateReturnsOnCall(i int, result1 error) {
	fake.generateMutex.Lock()
	defer fake.generateMutex.Unlock()
	fake.GenerateStub = nil
	if fake.generateReturnsOnCall == nil {
		fake.generateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.generateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGenerator) GenerateIndex(arg1 *options.Options, arg2 string, arg3 map[types.Architecture]oci.SignedImage) (string, error) {
	fake.generateIndexMutex.Lock()
	ret, specificReturn := fake.generateIndexReturnsOnCall[len(fake.generateIndexArgsForCall)]
	fake.generateIndexArgsForCall = append(fake.generateIndexArgsForCall, struct {
		arg1 *options.Options
		arg2 string
		arg3 map[types.Architecture]oci.SignedImage
	}{arg1, arg2, arg3})
	stub := fake.GenerateIndexStub
	fakeReturns := fake.generateIndexReturns
	fake.recordInvocation("GenerateIndex", []interface{}{arg1, arg2, arg3})
	fake.generateIndexMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGenerator) GenerateIndexCallCount() int {
	fake.generateIndexMutex.RLock()
	defer fake.generateIndexMutex.RUnlock()
	return len(fake.generateIndexArgsForCall)
}

func (fake *FakeGenerator) GenerateIndexCalls(stub func(*options.Options, string, map[types.Architecture]oci.SignedImage) (string, error)) {
	fake.generateIndexMutex.Lock()
	defer fake.generateIndexMutex.Unlock()
	fake.GenerateIndexStub = stub
}

func (fake *FakeGenerator) GenerateIndexArgsForCall(i int) (*options.Options, string, map[types.Architecture]oci.SignedImage) {
	fake.generateIndexMutex.RLock()
	defer fake.generateIndexMutex.RUnlock()
	argsForCall := fake.generateIndexArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeGenerator) GenerateIndexReturns(result1 string, result2 error) {
	fake.generateIndexMutex.Lock()
	defer fake.generateIndexMutex.Unlock()
	fake.GenerateIndexStub = nil
	fake.generateIndexReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeGenerator) GenerateIndexReturnsOnCall(i int, result1 string, result2 error) {
	fake.generateIndexMutex.Lock()
	defer fake.generateIndexMutex.Unlock()
	fake.GenerateIndexStub = nil
	if fake.generateIndexReturnsOnCall == nil {
		fake.generateIndexReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.generateIndexReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeGenerator) Key() string {
	fake.keyMutex.Lock()
	ret, specificReturn := fake.keyReturnsOnCall[len(fake.keyArgsForCall)]
	fake.keyArgsForCall = append(fake.keyArgsForCall, struct {
	}{})
	stub := fake.KeyStub
	fakeReturns := fake.keyReturns
	fake.recordInvocation("Key", []interface{}{})
	fake.keyMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGenerator) KeyCallCount() int {
	fake.keyMutex.RLock()
	defer fake.keyMutex.RUnlock()
	return len(fake.keyArgsForCall)
}

func (fake *FakeGenerator) KeyCalls(stub func() string) {
	fake.keyMutex.Lock()
	defer fake.keyMutex.Unlock()
	fake.KeyStub = stub
}

func (fake *FakeGenerator) KeyReturns(result1 string) {
	fake.keyMutex.Lock()
	defer fake.keyMutex.Unlock()
	fake.KeyStub = nil
	fake.keyReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeGenerator) KeyReturnsOnCall(i int, result1 string) {
	fake.keyMutex.Lock()
	defer fake.keyMutex.Unlock()
	fake.KeyStub = nil
	if fake.keyReturnsOnCall == nil {
		fake.keyReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.keyReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.extMutex.RLock()
	defer fake.extMutex.RUnlock()
	fake.generateMutex.RLock()
	defer fake.generateMutex.RUnlock()
	fake.generateIndexMutex.RLock()
	defer fake.generateIndexMutex.RUnlock()
	fake.keyMutex.RLock()
	defer fake.keyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ generator.Generator = new(FakeGenerator)
